---@type LazySpec
return {
  "yetone/avante.nvim",
  event = "VeryLazy",
  opts = {
    -- -@alias Provider "openai" | "claude" | "azure" | "cohere" | [string]
    provider = "openai",
    openai = {
      -- endpoint = "http://192.168.6.42:11434",
      endpoint = "http://192.168.6.42:11434/v1", -- doesn't work as well
      model = "codeqwen:7b",
      temperature = 0,
      max_tokens = 4096,
      ["local"] = true,
    },
    -- vendors = {
    --   ["ollama"] = {
    --     ["local"] = true,
    --     endpoint = "192.168.6.42:11434/v1",
    --     model = "codeqwen:7b",
    --     parse_curl_args = function(opts, code_opts)
    --       return {
    --         url = opts.endpoint .. "/chat/completions",
    --         headers = {
    --           ["Accept"] = "application/json",
    --           ["Content-Type"] = "application/json",
    --         },
    --         body = {
    --           model = opts.model,
    --           messages = require("avante.providers").openai.parse_message(code_opts), -- you can make your own message, but this is very advanced
    --           max_tokens = 2048,
    --           stream = true,
    --         },
    --       }
    --     end,
    --     parse_response_data = function(data_stream, event_state, opts)
    --       require("avante.providers").openai.parse_response(data_stream, event_state, opts)
    --     end,
    --     -- parse_stream_data = function(data, handler_opts)
    --     --   require("avante.providers").openai.parse_stream_data(data, handler_opts)
    --     -- end,
    --   },
    -- },
    mappings = {
      ask = "<leader>aa",
      edit = "<leader>ae",
      refresh = "<leader>ar",
      --- @class AvanteConflictMappings
      diff = {
        ours = "co",
        theirs = "ct",
        both = "cb",
        next = "]x",
        prev = "[x",
      },
      jump = {
        next = "]]",
        prev = "[[",
      },
      submit = {
        normal = "<CR>",
        insert = "<C-s>",
      },
      toggle = {
        debug = "<leader>ad",
        hint = "<leader>ah",
      },
    },
    hints = { enabled = true },
    windows = {
      wrap = true, -- similar to vim.o.wrap
      width = 30, -- default % based on available width
      sidebar_header = {
        align = "center", -- left, center, right for title
        rounded = true,
      },
    },
    highlights = {
      ---@type AvanteConflictHighlights
      diff = {
        current = "DiffText",
        incoming = "DiffAdd",
      },
    },
    --- @class AvanteConflictUserConfig
    diff = {
      debug = false,
      autojump = true,
      ---@type string | fun(): any
      list_opener = "copen",
    },
  },
  dependencies = {
    "stevearc/dressing.nvim",
    "nvim-lua/plenary.nvim",
    "MunifTanjim/nui.nvim",
    --- The below dependencies are optional,
    "nvim-tree/nvim-web-devicons", -- or echasnovski/mini.icons
    {
      -- support for image pasting
      "HakonHarnes/img-clip.nvim",
      event = "VeryLazy",
      opts = {
        -- recommended settings
        default = {
          embed_image_as_base64 = false,
          prompt_for_file_name = false,
          drag_and_drop = {
            insert_mode = true,
          },
        },
      },
    },
    {
      -- Make sure to setup it properly if you have lazy=true
      "MeanderingProgrammer/render-markdown.nvim",
      opts = {
        file_types = { "markdown", "Avante" },
      },
      ft = { "markdown", "Avante" },
    },
  },
}
